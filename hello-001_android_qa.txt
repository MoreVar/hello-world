Q001. SVN与Git有什么区别？
(1)SVN是集中式版本控制系统，而Git是分布式版本控制系统。(对于没有网络时很有用)
分布式是指：每个开发人员从中心版本库/服务器上ChectOut代码后会在自己的机器上克隆一个自己的版本库。
(2)SVN更适合项目管理，而Git更适合代码管理。
Git的常用命令包括：clone/pull/push/branch/merge等。
(3)Git的缺点：工作目录只能是整个项目(而SVN可以基于项目中的某个目录进行checkout)。
- 参考：
[20160703]Git与SVN的区别 https://www.cnblogs.com/somethingWithiOS/p/5636356.html



Q002. 四大组件相关问题
1. 四大组件的基本概念
(1)Activity：是一种展示型组件，用于向用户直接地展示一个界面，并且可以接收用户的输入信息从而进行交互，扮演的是一种前台界面的角色。
(1)Service：是一种计算型组件，用于在后台执行一系列计算任务，用户无法直接感知它的存在。尽管Service是用于执行后台计算的，但它本身是运行在主线程中的，因此耗时的后台计算仍然需要在单独的线程中去完成。
(1)BroadcastReceiver：是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息，无法被用户直接感知，不适合执行耗时操作。注册方式有两种：静态注册和动态注册。
(1)ContentProvider：是一种数据共享型组件，用于向其他组件乃至其他应用共享数据，无法被用户直接感知。它的内部需要实现增删改查这四种操作，并且需要处理好线程同步(因为这几个方法是在Binder线程池中被调用的)。

1. 四大组件与其他类有什么区别：
(1)四大组件都是在应用安装时由PackageManagerService解析并注册的，Android系统(框架)通过反射管理它们的生命周期。

2. 本地广播与普通广播有什么区别：本地广播只能在App内部传播，更安全(不用担心隐私泄露)，性能更高。
3. Service分为两种工作状态：启动状态(主要用于执行后台计算)与绑定状态(主要用于其他组件和Service的交互)，这两种状态是可以共存的。
- 参考：
[20160906]四大组件 https://blog.csdn.net/shenggaofei/article/details/52450668

4. ActivityManagerService
(1)主要负责系统中四大组件的启动、切换、调度及应用进程的管理和调度等工作。
5. WindowMangerService



Q003. 五大存储方式相关问题
(1)SharedPreferences：适合保存少量数据(数据格式简单，如App的各种配置信息)，基于XML键值对。
(2)文件
(3)SQLite数据库
(4)ContentProvider：一个ContentProvider类实现了一组标准的方法接口，从而能够让其他的应用保存或读取此ContentProvider的各种数据类型。
(5)网络



Q004. 网络相关
0. OSI七层网络模型
(1)物理层/数据链路层/网络层/传输层/会话层/表示层/应用层
(2)TCP/IP协议分为四层：网络接口层、网间层(IP)、传输层(TCP/UDP)、应用层(FTP/DNS/HTTP)

1. Socket、TCP、UDP：
(1)Socket即套接字，是一个对TCP/IP协议进行封装的API(属于传输层)。
(1.1)Socket是{IP:PORT}成对出现的(发送-接收)。分3个步骤：S端监听，C端请求，S端响应请求并和C端建立连接。建立网络连接后，服务器主动发送数据(HTTP是请求-响应)。
(1.2)Socket分为流式套接字和用户数据报套接字两种，分别对应于网络的传输控制层中的TCP和UDP协议(创建Socket时可以指定使用TCP还是UDP)。
(2)TCP协议是面对连接的协议，提供可靠的双向通信功能，TCP连接的建立需要经过“三次握手”才能完成，为了提供稳定的数据传输功能，其本身提供了超时重传机制，因此具有很高的稳定性。TCP的释放需要“四次挥手”。基于TCP的应用层协议有FTP、HTTP、SMTP等(DNS同时使用TCP和UDP)。
(3)UDP是无连接的，提供不稳定的单向通信功能(也可以实现双向通信功能)。性能上，UDP具有更好的效率，其缺点是不保证数据一定能够正确传输，尤其是在网络拥堵的情况下。基于UDP的应用层协议有SNMP等(DNS同时使用TCP和UDP)。
(4)长连接和短连接。

2. HTTP：
(1)HTTP(超文本传输协议)是一个基于TCP/IP来传递数据(文本,图片,文件)的网络传输(应用层)协议。
(2)8种请求方法(HTTP/1.0定义3种，HTTP/1.1新增5种)：get、post、head、put、delete、trace、options、connect。
(3)HTTP请求/响应的步骤(5步)：C连接到S，C端发送HTTP请求，S端接受请求并返回HTTP响应，释放TCP连接，C端解析HTML内容。
(4)端口：HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTPS使用443端口。
(5)HTTP请求：请求行(请求类型如GET,要访问的资源,HTTP版本)、消息报头(服务器要使用的附加信息)、空行、请求正文(也叫主体,可以为空)。
(6)HTTP响应：状态行(HTTP协议版本号,状态码如200,状态消息如OK)、消息报头(客户端要使用的附加信息)、空行、响应正文。
(7)状态码：1xx表示继续，2xx表示正常，3xx表示网络问题(重定向)，4xx表示Client错误，5xx表示Server错误。
- 问题
(1)GET和POST的区别(5点)：1-GET重点是从服务器获取资源，而POST是向服务器发送数据；2-GET是通过URL传值(请求参数及对应值会附在URL后面)，而POST提交会把要提交的数据放在HTTP包体中；3-传输数据的长度，GET受URL长度限制，POST受服务器规定限制(理论上不受限)；4-POST的安全性要比GET高(因为URL是可见的)；5-GET只支持ASCII字符(中文可能会乱码)，POST支持标准字符集
(2)常见的HTTP消息报头字段(编码方式/是否缓存)：1-通用字段(Date创建报文时间/Connection连接的管理/Cache-Control缓存的控制/Transfer-Encoding报文主体的传输编码方式)；2-请求报文(Accept可处理的媒体类型)；3-响应报文(Accept-Ranges可接受的字节范围)；4-正文(Content-Type实体主类的类型，比如键值对、纯文本、消息等)
(3)HTTP使用TCP而不是UDP的原因在于（打开）一个网页必须传送很多数据，而TCP协议提供传输控制，按顺序组织数据，和错误纠正。
(4)HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。
(5)HTTP协议的瓶颈及其优化技巧都是基于TCP协议本身的特性。如TCP建立连接时三次握手有1.5个RTT的延迟，为了避免每次请求的都经历握手带来的延迟，应用层会选择不同策略的http长链接方案。
(6)HTTP/1.1的状态码及含义：1xx-指示信息(请求已接收)2xx-成功(请求已被成功接收)3xx-重定向(要完成请求需进一步操作)4xx-客户端错误(语法或请求无法实现)5xx-服务器错误(服务器未能实现合法请求)
- 使用现状
(1)HTTP/1.0是第一个在通讯中指定版本号的HTTP协议版本，至今仍被广泛采用，特别是在代理服务器中。HTTP/1.1是当前版本，持久连接被默认采用，并能很好地配合代理服务器工作，还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。HTTP/2.0在HTTP/1.x的基础上，大幅度的提高了web性能，减少了网络延迟。
(2)HTTP/1.0的问题：1-连接无法复用(服务器处理完每次请求后立即断开TCP连接)会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。2-不支持文件断点续传(每次传送文件都是从文件头开始，即0字节处开始)。
(3)HTTP/1.1的改进：1-支持持久连接（HTTP/1.1的默认模式使用带流水线的持久连接），在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。2-允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。3-增加了更多的请求头和响应头来改进和扩充HTTP/1.0的功能(比如身份认证、状态管理和Cache缓存等)。4-总的来说，相对HTTP/1.0的区别：缓存处理、带宽优化及网络连接的使用、错误通知的管理、消息在网络中的发送、互联网地址的维护、安全性及完整性。
(4)HTTP/2.0的特性：多路复用、二进制分帧、首部压缩、服务端推送。
- Android端的HTTP现状
(1)对于使用webview的app来说，需要基于chrome内核的webview才能支持spdy和http2.0(android系统的webview是从4.4才改成基于chrome内核的)。
(2)对于使用native api调用的http请求来说，okhttp是同时支持spdy和http2.0的可行方案。

3. HTTPS：
(1)在HTTP的基础上加入了SSL协议(现在使用的是TLS协议)，实现数据的加密传输。
(2)HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。TLS/SSL不仅仅是一套加密传输的协议，使用了非对称加密，对称加密以及HASH算法。
(3)解决两大安全问题：身份验证、通信加密。
(4)关键概念：数字证书、CA(证书的签发机构)、SSL/TLS协议、握手协议。
(5)解决HTTPS性能：HTTP2。

参考：
[20161021]关于HTTP协议，一篇就够了 https://www.cnblogs.com/ranyonsue/p/5984001.html
[20160808]面试时如何优雅的谈论HTTP/1.0/1.1/2.0 https://www.jianshu.com/p/52d86558ca57
[20160630]HTTP/2.0相比1.0有哪些重大改进 https://www.zhihu.com/question/34074946/answer/108588042


Q005. 设计模式
0. 原则(6个)：单一职责，开闭，里氏代换，依赖倒置，接口隔离，迪米特

1. 单例模式
定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
要点：(1)某个类只能有一个实例，(2)必须自行创建这个实例，(3)必须自行向整个系统提供这个实例。
解决的问题：一个全局使用的类频繁地创建与销毁。
优点：(1)减少内存开销(在内存中只有一个实例)，尤其是频繁的创建和销毁实例(2)避免对资源的多重占用(比如读写文件操作)。
实现：饿汉式、懒汉式、双重检查锁、静态内部类。
应用举例：App的全局访问、SQLite的全局访问。

2. 工厂方法模式
定义：抽象类中不变的部分，提取其中个性化的部分为独立类，通过依赖注入以达到解耦、复用和方便后期维护扩展的目的。(实现多态性)
要点：抽象工厂、具体工厂、抽象产品、具体产品。
解决的问题：接口选择。针对一个产品的等级结构。
优点：(1)调用者想创建对象只需知道名称即可(2)扩展性高，增加产品时只需扩展一个工厂类即可(3)屏蔽产品的具体实现，调用者只关心产品的接口。
缺点：增加了类的个数，导致系统的复杂度增加，具体类的依赖增加。
应用举例：ListActivity。

3. 抽象工厂模式
定义：为一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。(实现多态性)
要点：在一个工厂里聚合多个同类产品。针对多个产品的等级结构。
要解决的问题：接口选择。
优点：保证使用的是同一个产品族中的对象。
缺点：产品族扩展比较麻烦。
应用举例：App换皮肤，BaseActivity。

4. 建造者模式
定义：使用多个简单的对象一步一步构建成一个复杂的对象。(将对象的构建与展示分离)
要点：Builder创建和提供实例，Director管理建造出来的实例的依赖关系。
要解决的问题：复杂对象的创建(基本部件不会变，而组合经常变化时)。
优点：封装性，Builder独立，易扩展。
缺点：产品必须有共同点。
应用举例：AlertDialog、Notification。

5. 观察者模式
定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
要点：订阅、取消订阅、通知。
要解决的问题：一个对象状态改变给其他对象通知的问题。
优点：观察者和被观察者是抽象耦合的。
缺点：将所有的观察者都通知到需要花费很多时间。需要避免循环引用。
应用举例：Java的Observable接口。

6. 适配器模式
定义：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
要点：适配器类。
要解决的问题：(维护旧代码时的做法)
优点：复用现有的类，扩展性。
缺点：过多使用会导致系统比较混乱。
应用举例：ListView和RecyclerView的Adapter。

7. 代理模式
定义：给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。
要点：与被代理类组合，在访问一个类时做一些控制。
要解决的问题：直接访问对象时带来的问题。
优点：职责清晰、可扩展。
缺点：有些代理模式的实现非常复杂。
应用举例：Binder。

8. 装饰模式
定义：允许向一个现有的对象添加新的功能，同时又不改变其结构。(可代替继承)
要点：将具体功能职责划分，同时继承装饰者模式。
要解决的问题：在不想增加很多子类的情况下扩展类。
优点：装饰类和被装饰类不会相互耦合，可以动态扩展一个实现类的功能。
缺点：多层装饰比较复杂。
应用举例：ContextWrapper。



Q006. 开源库
1. RxJava
(1)是什么：实现异步操作的库。
(2)优点：相比AsyncTask/Handler等，随着程序逻辑变得越来越复杂，异步代码依然能够保持简洁。
(3)基本实现：1-创建Observer(观察者，决定事件触发的时候将有怎样的行为)，2-创建Observeable(被观察者，决定什么时候触发事件及触发怎样的事件)，3-订阅(Subscribe，将Observer和Observable联结起来)
- 问题
(1)Observer和Subscriber：S对O接口进行了一些扩展，但基本使用方式完全一样，S增加了onStart/unsubscribe方法。
(2)线程控制：使用Scheduler切换线程(默认是线程不变，即在哪个线程调用subscribe，就在哪个线程生产事件，在哪个线程生产事件就在哪个线程消费事件)。
(3)变换：将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。
(3.1)map()：事件对象的直接变换(一对一)，把传入的参数转化后返回另一个对象。
(3.2)flatMap()：和map()一样，把传入的参数转化之后返回另一个对象，但是这里返回的是个Observable对象，并且这个Observable对象并不是被直接发送到了Subscriber的回调方法中。【原理】1-使用传入的事件对象创建一个Observable对象；2-并不发送这个Observable对象，而是将它激活，于是它开始发送事件；3-每一个创建出来的Observable发送的事件，都被汇入同一个Observable，而这个Observable负责将这些事件统一交给Subscriber的回调方法。【扩展】由于可以在嵌套的Observable中添加异步代码，flatMap()也常用于嵌套的异步操作，如嵌套的网络请求(传统的嵌套请求需要使用嵌套的Callback来实现)。
(3.3)变换的原理：lift()，变换的实质是针对事件序列的处理和再发送。
(3.4)compose()：对Observable整体的变换(lift是针对事件项和事件序列的，而compose是针对Observable自身的)。
(4)线程控制-2：可以利用subscribeOn()结合observeOn()来实现线程控制，让事件的产生和消费发生在不同的线程。
(4.1)observeOn()指定的Subscriber的线程，而这个Subscriber并不一定是subscribe()参数中的Subscriber，而是observeOn()执行时的当前Observable所对应的Subscriber(换句话说，是observeOn()之后的操作所在的线程)。
(4.2)subscribeOn()和observeOn()的内部实现也是用的lift()。
(5)RxJava的适用场景和使用方式：与Retrofit结合使用/各种异步操作(DB读写、大图片载入、文件压缩解压等耗时操作)/RxBus。
(6)RxJava的常用操作符：
(6.1)创建：just/from/unfaseCreate/defer/empty/never/error/range/interval
(6.2)变换：buffer/map/flatMap/window
(6.3)过滤：filter/take/takeFirst/takeLast/skip/skipLast/elementAt/elementOrDefault/distinct/ofType/first/firstOrDefault/last/lastOrDefault
(6.4)组合：startWith/merge/zip/concat
- 参考：
[20170916]给Android开发者的RxJava详解 - http://gank.io/post/560e15be2dca930e00da1083
[20160901]RxJava操作符大全 - https://blog.csdn.net/maplejaw_/article/details/52396175
[20170405]RxJava常用操作符 - https://www.jianshu.com/p/eceb6b31d8cb

2. Retrofit
(1)是什么：是一个RESTful(一种架构风格)的HTTP网络请求框架的封装。
(2)优点：1-功能强大(支持同步&异步、支持多种数据的解析&序列化格式、支持RxJava)，2-简洁易用(高度封装、通过注解配置网络请求参数)。
(3)基本实现：1-创建Retrofit实例，2-定义接口，3-接口调用。
- 问题：
(1)Retrofit专注于接口的封装，OkHttp专注于网络请求的高效。我们的App通过Retrofit请求网络，实际上是使用Retrofit接口层封装请求参数、Header、Url等信息，之后由OkHttp完成后续的请求操作，在服务端返回数据之后，OkHttp将原始的结果交给Retrofit，Retrofit根据用户的需求对结果进行解析的过程。
(2)Converter：默认情况下Retrofit只支持将HTTP的响应体转换为ResponseBody，Retrofit提供的Converter则是用于将ResponseBody转换为我们想要的类型。
(3)CallAdapter：Converter是对于Call<T>中T的转换，而CallAdapter则可以对Call转换。
(4)注解(22个)：分为3类，1-网络请求方法8个(GET/POST等)，2-标记类3个，3-网络请求参数11个。
- 参考：
[20170907]Retrofit简介 - http://www.cnblogs.com/baiqiantao/p/7488562.html
[20170908]Retrofit从入门到了解【总结】 - https://www.cnblogs.com/baiqiantao/p/7494850.html
[20170626]这是一份很详细的Retrofit2.0使用教程(含实例讲解) - https://blog.csdn.net/carson_ho/article/details/73732076

3. greenDAO
(1)是什么：ORM框架，目前最新版本是3.2.2。
(2)特点：应用广泛、jar包小、最快、支持加密、内存消耗小(缓存)。
(3)关键类：
(3.1)DaoMaster：创建DaoSession。
(3.2)DaoSession：管理所有可以使用的XxxDao对象。因为dbConnection属于DaoMaster，所以多个sessions指向的是同一个dbConnection。对于在内存中的entity对象，greenDAO使用的是弱引用。【副作用】session "cache"(可以通过daoSession.clear()或者xxDao.detachAll()清除缓存)。
(3.3)XxxDao：提供快速操作entity的方法。
(3.4)Entities：持久对象。
(4)查询：
(4.1)QueryBuilder：针对entity自定义查询条件而不需要使用SQL语句。
(4.2)Query：代表一个可以被执行多次的查询。
(4.3)list：所有实体都加载到内存中
(4.4)listLazy/listLazyUncached/listIterator：按需加载(持有数据库cursor，需要及时关闭)。
(4.5)forCurrentThread：多线程查询(返回Query类型的threadLocal的实例)。
(4.6)RawQueries：使用SQL语句查询。
- 参考：
[官网]https://github.com/greenrobot/greenDAO
[20160719]介绍GreenDao https://blog.csdn.net/byoooy/article/details/51955706
[Sessions]http://greenrobot.org/greendao/documentation/sessions/



安卓项目打包生成apk安装的文件的过程：最重要的一步是将java代码编译成.class字节文件，再打包转化为一个或多个.dex格式的代码压缩文件。这种dex文件便是Android虚拟机所能识别、解析并运行的程序。

SharedPreference可以跨进程吗：不支持，MODE_MULTI_PROCESS不能保证进程安全(会随机出现数据丢失的现象)
